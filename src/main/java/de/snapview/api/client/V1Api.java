/*
 * Snapview6 API
 * Official API available to Snapview customers
 *
 * OpenAPI spec version: v1
 * Contact: support@snapview.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.snapview.api.client;

import com.google.gson.reflect.TypeToken;
import de.snapview.api.*;
import de.snapview.api.domain.*;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1Api {
    private ApiClient apiClient;

    public V1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public V1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v1EsignaturePost
     * @param body CreateSessionIS2Session data (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1EsignaturePostCall(CreateSessionIS2SessionRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/esignature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1EsignaturePostValidateBeforeCall(CreateSessionIS2SessionRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = v1EsignaturePostCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to create a eSignature(IS2) session.
     *
     * @param body CreateSessionIS2Session data (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1EsignaturePost(CreateSessionIS2SessionRequestBody body) throws ApiException {
        v1EsignaturePostWithHttpInfo(body);
    }

    /**
     * Used to create a eSignature(IS2) session.
     *
     * @param body CreateSessionIS2Session data (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1EsignaturePostWithHttpInfo(CreateSessionIS2SessionRequestBody body) throws ApiException {
        com.squareup.okhttp.Call call = v1EsignaturePostValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to create a eSignature(IS2) session. (asynchronously)
     *
     * @param body CreateSessionIS2Session data (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1EsignaturePostAsync(CreateSessionIS2SessionRequestBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1EsignaturePostValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1EsignatureRenewPost
     * @param body RenewSessionIS2Session data (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1EsignatureRenewPostCall(RenewSessionIS2SessionRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/esignature/renew";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1EsignatureRenewPostValidateBeforeCall(RenewSessionIS2SessionRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = v1EsignatureRenewPostCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to renew a eSignature(IS2) session to enable its use with eSignature application.
     *
     * @param body RenewSessionIS2Session data (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1EsignatureRenewPost(RenewSessionIS2SessionRequestBody body) throws ApiException {
        v1EsignatureRenewPostWithHttpInfo(body);
    }

    /**
     * Used to renew a eSignature(IS2) session to enable its use with eSignature application.
     *
     * @param body RenewSessionIS2Session data (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1EsignatureRenewPostWithHttpInfo(RenewSessionIS2SessionRequestBody body) throws ApiException {
        com.squareup.okhttp.Call call = v1EsignatureRenewPostValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to renew a eSignature(IS2) session to enable its use with eSignature application. (asynchronously)
     *
     * @param body RenewSessionIS2Session data (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1EsignatureRenewPostAsync(RenewSessionIS2SessionRequestBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1EsignatureRenewPostValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1EsignatureSessionsGet
     * @param secureToken secureToken of a Snapview Session (optional)
     * @param demoSystem indicates whether production or demonstration eSignature system should be queried (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1EsignatureSessionsGetCall(String secureToken, Boolean demoSystem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/esignature/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secureToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("secureToken", secureToken));
        if (demoSystem != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("demoSystem", demoSystem));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1EsignatureSessionsGetValidateBeforeCall(String secureToken, Boolean demoSystem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = v1EsignatureSessionsGetCall(secureToken, demoSystem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to retrieve eSignature sessions of the user linked to a Snapview session.
     *
     * @param secureToken secureToken of a Snapview Session (optional)
     * @param demoSystem indicates whether production or demonstration eSignature system should be queried (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1EsignatureSessionsGet(String secureToken, Boolean demoSystem) throws ApiException {
        v1EsignatureSessionsGetWithHttpInfo(secureToken, demoSystem);
    }

    /**
     * Used to retrieve eSignature sessions of the user linked to a Snapview session.
     *
     * @param secureToken secureToken of a Snapview Session (optional)
     * @param demoSystem indicates whether production or demonstration eSignature system should be queried (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1EsignatureSessionsGetWithHttpInfo(String secureToken, Boolean demoSystem) throws ApiException {
        com.squareup.okhttp.Call call = v1EsignatureSessionsGetValidateBeforeCall(secureToken, demoSystem, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to retrieve eSignature sessions of the user linked to a Snapview session. (asynchronously)
     *
     * @param secureToken secureToken of a Snapview Session (optional)
     * @param demoSystem indicates whether production or demonstration eSignature system should be queried (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1EsignatureSessionsGetAsync(String secureToken, Boolean demoSystem, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1EsignatureSessionsGetValidateBeforeCall(secureToken, demoSystem, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1JoinsessionurlPut
     * @param body Authentication and JoinsessionUrl string. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1JoinsessionurlPutCall(AccountRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/joinsessionurl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1JoinsessionurlPutValidateBeforeCall(AccountRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = v1JoinsessionurlPutCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to modify the custom joinsession URL for your account
     *
     * @param body Authentication and JoinsessionUrl string. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1JoinsessionurlPut(AccountRequestBody body) throws ApiException {
        v1JoinsessionurlPutWithHttpInfo(body);
    }

    /**
     * Used to modify the custom joinsession URL for your account
     *
     * @param body Authentication and JoinsessionUrl string. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1JoinsessionurlPutWithHttpInfo(AccountRequestBody body) throws ApiException {
        com.squareup.okhttp.Call call = v1JoinsessionurlPutValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to modify the custom joinsession URL for your account (asynchronously)
     *
     * @param body Authentication and JoinsessionUrl string. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1JoinsessionurlPutAsync(AccountRequestBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1JoinsessionurlPutValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1SessionByKeyDelete
     * @param key 9-digit session key. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SessionByKeyDeleteCall(String key, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/session/{key}"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SessionByKeyDeleteValidateBeforeCall(String key, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling v1SessionByKeyDelete(Async)");
        }


        com.squareup.okhttp.Call call = v1SessionByKeyDeleteCall(key, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to delete a session belonging to the authenticated account.
     *
     * @param key 9-digit session key. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1SessionByKeyDelete(String key, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        v1SessionByKeyDeleteWithHttpInfo(key, accountIdentifier, accountPassword, accessToken);
    }

    /**
     * Used to delete a session belonging to the authenticated account.
     *
     * @param key 9-digit session key. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1SessionByKeyDeleteWithHttpInfo(String key, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = v1SessionByKeyDeleteValidateBeforeCall(key, accountIdentifier, accountPassword, accessToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to delete a session belonging to the authenticated account. (asynchronously)
     *
     * @param key 9-digit session key. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SessionByKeyDeleteAsync(String key, String accountIdentifier, String accountPassword, String accessToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SessionByKeyDeleteValidateBeforeCall(key, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1SessionByKeyGet
     * @param key 9-digit session key. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SessionByKeyGetCall(String key, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/session/{key}"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SessionByKeyGetValidateBeforeCall(String key, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling v1SessionByKeyGet(Async)");
        }


        com.squareup.okhttp.Call call = v1SessionByKeyGetCall(key, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to retrieve information about a session belonging to the authenticated account.
     * Returns the same information as the create session call
     * @param key 9-digit session key. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1SessionByKeyGet(String key, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        v1SessionByKeyGetWithHttpInfo(key, accountIdentifier, accountPassword, accessToken);
    }

    /**
     * Used to retrieve information about a session belonging to the authenticated account.
     * Returns the same information as the create session call
     * @param key 9-digit session key. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1SessionByKeyGetWithHttpInfo(String key, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = v1SessionByKeyGetValidateBeforeCall(key, accountIdentifier, accountPassword, accessToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to retrieve information about a session belonging to the authenticated account. (asynchronously)
     * Returns the same information as the create session call
     * @param key 9-digit session key. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SessionByKeyGetAsync(String key, String accountIdentifier, String accountPassword, String accessToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SessionByKeyGetValidateBeforeCall(key, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1SessionByKeyPut
     * @param key 9-digit Session key (required)
     * @param body Authentication and session information (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SessionByKeyPutCall(String key, SessionRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/session/{key}"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SessionByKeyPutValidateBeforeCall(String key, SessionRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling v1SessionByKeyPut(Async)");
        }


        com.squareup.okhttp.Call call = v1SessionByKeyPutCall(key, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to modify a session
     * Returns the same information as the create session call
     * @param key 9-digit Session key (required)
     * @param body Authentication and session information (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1SessionByKeyPut(String key, SessionRequestBody body) throws ApiException {
        v1SessionByKeyPutWithHttpInfo(key, body);
    }

    /**
     * Used to modify a session
     * Returns the same information as the create session call
     * @param key 9-digit Session key (required)
     * @param body Authentication and session information (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1SessionByKeyPutWithHttpInfo(String key, SessionRequestBody body) throws ApiException {
        com.squareup.okhttp.Call call = v1SessionByKeyPutValidateBeforeCall(key, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to modify a session (asynchronously)
     * Returns the same information as the create session call
     * @param key 9-digit Session key (required)
     * @param body Authentication and session information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SessionByKeyPutAsync(String key, SessionRequestBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SessionByKeyPutValidateBeforeCall(key, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1SessionByKeyStartGet
     * @param key 9-digit Session key (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SessionByKeyStartGetCall(String key, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/session/{key}/start"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SessionByKeyStartGetValidateBeforeCall(String key, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling v1SessionByKeyStartGet(Async)");
        }


        com.squareup.okhttp.Call call = v1SessionByKeyStartGetCall(key, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Start a session with the passed key belonging to the authenticated account
     *
     * @param key 9-digit Session key (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1SessionByKeyStartGet(String key, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        v1SessionByKeyStartGetWithHttpInfo(key, accountIdentifier, accountPassword, accessToken);
    }

    /**
     * Start a session with the passed key belonging to the authenticated account
     *
     * @param key 9-digit Session key (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1SessionByKeyStartGetWithHttpInfo(String key, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = v1SessionByKeyStartGetValidateBeforeCall(key, accountIdentifier, accountPassword, accessToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * Start a session with the passed key belonging to the authenticated account (asynchronously)
     *
     * @param key 9-digit Session key (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SessionByKeyStartGetAsync(String key, String accountIdentifier, String accountPassword, String accessToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SessionByKeyStartGetValidateBeforeCall(key, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1SessionByKeyStopGet
     * @param key 9-digit Session key (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SessionByKeyStopGetCall(String key, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/session/{key}/stop"
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SessionByKeyStopGetValidateBeforeCall(String key, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling v1SessionByKeyStopGet(Async)");
        }


        com.squareup.okhttp.Call call = v1SessionByKeyStopGetCall(key, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * End a session with the passed key belonging to the authenticated account
     *
     * @param key 9-digit Session key (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1SessionByKeyStopGet(String key, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        v1SessionByKeyStopGetWithHttpInfo(key, accountIdentifier, accountPassword, accessToken);
    }

    /**
     * End a session with the passed key belonging to the authenticated account
     *
     * @param key 9-digit Session key (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1SessionByKeyStopGetWithHttpInfo(String key, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = v1SessionByKeyStopGetValidateBeforeCall(key, accountIdentifier, accountPassword, accessToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * End a session with the passed key belonging to the authenticated account (asynchronously)
     *
     * @param key 9-digit Session key (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SessionByKeyStopGetAsync(String key, String accountIdentifier, String accountPassword, String accessToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SessionByKeyStopGetValidateBeforeCall(key, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1SessionPost
     * @param body Authentication and session information (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SessionPostCall(SessionRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SessionPostValidateBeforeCall(SessionRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = v1SessionPostCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to create a session reservation for user of the authenticated account. (Post data only)
     * Success response (Status 200)        {          \&quot;data\&quot;: {              \&quot;nineDigitKey\&quot;: \&quot;0123456789\&quot;,              \&quot;secureToken\&quot;: \&quot;...\&quot;              \&quot;plannedStartUTC\&quot;: \&quot;2020/12/31 11:12:13\&quot;              \&quot;plannedStartTimeForLocalZone\&quot;: \&quot;2020.12.31 11:12:13(UTC+01:00)\&quot;,              \&quot;timeZoneOffset\&quot;: \&quot;60\&quot;,              \&quot;username\&quot;: \&quot;username\&quot;,              \&quot;freeField1\&quot;: \&quot;\&quot;,              \&quot;freeField2\&quot;: \&quot;\&quot;,              \&quot;freeField3\&quot;: \&quot;\&quot;,              \&quot;password\&quot;: \&quot;\&quot;,              \&quot;topic\&quot;: \&quot;\&quot;,              \&quot;duration\&quot;: 0,              \&quot;status\&quot;: \&quot;SESSION_RESERVED\&quot;          },          \&quot;requestUri\&quot;: \&quot;/v1/session\&quot;,          \&quot;success\&quot;: true,          \&quot;message\&quot;: \&quot;Session created.\&quot;      }
     * @param body Authentication and session information (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1SessionPost(SessionRequestBody body) throws ApiException {
        v1SessionPostWithHttpInfo(body);
    }

    /**
     * Used to create a session reservation for user of the authenticated account. (Post data only)
     * Success response (Status 200)        {          \&quot;data\&quot;: {              \&quot;nineDigitKey\&quot;: \&quot;0123456789\&quot;,              \&quot;secureToken\&quot;: \&quot;...\&quot;              \&quot;plannedStartUTC\&quot;: \&quot;2020/12/31 11:12:13\&quot;              \&quot;plannedStartTimeForLocalZone\&quot;: \&quot;2020.12.31 11:12:13(UTC+01:00)\&quot;,              \&quot;timeZoneOffset\&quot;: \&quot;60\&quot;,              \&quot;username\&quot;: \&quot;username\&quot;,              \&quot;freeField1\&quot;: \&quot;\&quot;,              \&quot;freeField2\&quot;: \&quot;\&quot;,              \&quot;freeField3\&quot;: \&quot;\&quot;,              \&quot;password\&quot;: \&quot;\&quot;,              \&quot;topic\&quot;: \&quot;\&quot;,              \&quot;duration\&quot;: 0,              \&quot;status\&quot;: \&quot;SESSION_RESERVED\&quot;          },          \&quot;requestUri\&quot;: \&quot;/v1/session\&quot;,          \&quot;success\&quot;: true,          \&quot;message\&quot;: \&quot;Session created.\&quot;      }
     * @param body Authentication and session information (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SessionResponse> v1SessionPostWithHttpInfo(SessionRequestBody body) throws ApiException {
        com.squareup.okhttp.Call call = v1SessionPostValidateBeforeCall(body, null, null);
        return apiClient.execute(call, SessionResponse.class);
    }

    /**
     * Used to create a session reservation for user of the authenticated account. (Post data only) (asynchronously)
     * Success response (Status 200)        {          \&quot;data\&quot;: {              \&quot;nineDigitKey\&quot;: \&quot;0123456789\&quot;,              \&quot;secureToken\&quot;: \&quot;...\&quot;              \&quot;plannedStartUTC\&quot;: \&quot;2020/12/31 11:12:13\&quot;              \&quot;plannedStartTimeForLocalZone\&quot;: \&quot;2020.12.31 11:12:13(UTC+01:00)\&quot;,              \&quot;timeZoneOffset\&quot;: \&quot;60\&quot;,              \&quot;username\&quot;: \&quot;username\&quot;,              \&quot;freeField1\&quot;: \&quot;\&quot;,              \&quot;freeField2\&quot;: \&quot;\&quot;,              \&quot;freeField3\&quot;: \&quot;\&quot;,              \&quot;password\&quot;: \&quot;\&quot;,              \&quot;topic\&quot;: \&quot;\&quot;,              \&quot;duration\&quot;: 0,              \&quot;status\&quot;: \&quot;SESSION_RESERVED\&quot;          },          \&quot;requestUri\&quot;: \&quot;/v1/session\&quot;,          \&quot;success\&quot;: true,          \&quot;message\&quot;: \&quot;Session created.\&quot;      }
     * @param body Authentication and session information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SessionPostAsync(SessionRequestBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SessionPostValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1SessionsGet
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param todaySessions get sessions scheduled for today (optional)
     * @param futureSessions get sessions scheduled for the futere from now on. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1SessionsGetCall(String accountIdentifier, String accountPassword, String accessToken, Boolean todaySessions, Boolean futureSessions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));
        if (todaySessions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("todaySessions", todaySessions));
        if (futureSessions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("futureSessions", futureSessions));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1SessionsGetValidateBeforeCall(String accountIdentifier, String accountPassword, String accessToken, Boolean todaySessions, Boolean futureSessions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = v1SessionsGetCall(accountIdentifier, accountPassword, accessToken, todaySessions, futureSessions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to retrieve future sessions belonging to the authenticated account.
     * Success response (Status 200)        {        \&quot;requestBody\&quot;: \&quot;\&quot;,        \&quot;request\&quot;: {          \&quot;AccessToken\&quot;: \&quot;...\&quot;          \&quot;todaySessions\&quot;: \&quot;true\&quot;          \&quot;futureSessions\&quot;: \&quot;true\&quot;        },        \&quot;dataDict\&quot;: {},        \&quot;accessToken\&quot;: null,        \&quot;data\&quot;: [          {            \&quot;nineDigitKey\&quot;: \&quot;532538155\&quot;,            \&quot;plannedStartUTC\&quot;: \&quot;2048.04.24 21:49:00\&quot;,            \&quot;username\&quot;: \&quot;..\&quot;          },          ..          {            \&quot;nineDigitKey\&quot;: \&quot;577957522\&quot;,            \&quot;plannedStartUTC\&quot;: \&quot;2055.04.24 21:49:00\&quot;,            \&quot;username\&quot;: \&quot;..\&quot;          }        ],        \&quot;requestUri\&quot;: \&quot;/v1/sessions\&quot;,        \&quot;success\&quot;: true,        \&quot;message\&quot;: \&quot;Sessions retrieved.\&quot;      }
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param todaySessions get sessions scheduled for today (optional)
     * @param futureSessions get sessions scheduled for the futere from now on. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1SessionsGet(String accountIdentifier, String accountPassword, String accessToken, Boolean todaySessions, Boolean futureSessions) throws ApiException {
        v1SessionsGetWithHttpInfo(accountIdentifier, accountPassword, accessToken, todaySessions, futureSessions);
    }

    /**
     * Used to retrieve future sessions belonging to the authenticated account.
     * Success response (Status 200)        {        \&quot;requestBody\&quot;: \&quot;\&quot;,        \&quot;request\&quot;: {          \&quot;AccessToken\&quot;: \&quot;...\&quot;          \&quot;todaySessions\&quot;: \&quot;true\&quot;          \&quot;futureSessions\&quot;: \&quot;true\&quot;        },        \&quot;dataDict\&quot;: {},        \&quot;accessToken\&quot;: null,        \&quot;data\&quot;: [          {            \&quot;nineDigitKey\&quot;: \&quot;532538155\&quot;,            \&quot;plannedStartUTC\&quot;: \&quot;2048.04.24 21:49:00\&quot;,            \&quot;username\&quot;: \&quot;..\&quot;          },          ..          {            \&quot;nineDigitKey\&quot;: \&quot;577957522\&quot;,            \&quot;plannedStartUTC\&quot;: \&quot;2055.04.24 21:49:00\&quot;,            \&quot;username\&quot;: \&quot;..\&quot;          }        ],        \&quot;requestUri\&quot;: \&quot;/v1/sessions\&quot;,        \&quot;success\&quot;: true,        \&quot;message\&quot;: \&quot;Sessions retrieved.\&quot;      }
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param todaySessions get sessions scheduled for today (optional)
     * @param futureSessions get sessions scheduled for the futere from now on. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1SessionsGetWithHttpInfo(String accountIdentifier, String accountPassword, String accessToken, Boolean todaySessions, Boolean futureSessions) throws ApiException {
        com.squareup.okhttp.Call call = v1SessionsGetValidateBeforeCall(accountIdentifier, accountPassword, accessToken, todaySessions, futureSessions, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to retrieve future sessions belonging to the authenticated account. (asynchronously)
     * Success response (Status 200)        {        \&quot;requestBody\&quot;: \&quot;\&quot;,        \&quot;request\&quot;: {          \&quot;AccessToken\&quot;: \&quot;...\&quot;          \&quot;todaySessions\&quot;: \&quot;true\&quot;          \&quot;futureSessions\&quot;: \&quot;true\&quot;        },        \&quot;dataDict\&quot;: {},        \&quot;accessToken\&quot;: null,        \&quot;data\&quot;: [          {            \&quot;nineDigitKey\&quot;: \&quot;532538155\&quot;,            \&quot;plannedStartUTC\&quot;: \&quot;2048.04.24 21:49:00\&quot;,            \&quot;username\&quot;: \&quot;..\&quot;          },          ..          {            \&quot;nineDigitKey\&quot;: \&quot;577957522\&quot;,            \&quot;plannedStartUTC\&quot;: \&quot;2055.04.24 21:49:00\&quot;,            \&quot;username\&quot;: \&quot;..\&quot;          }        ],        \&quot;requestUri\&quot;: \&quot;/v1/sessions\&quot;,        \&quot;success\&quot;: true,        \&quot;message\&quot;: \&quot;Sessions retrieved.\&quot;      }
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param todaySessions get sessions scheduled for today (optional)
     * @param futureSessions get sessions scheduled for the futere from now on. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1SessionsGetAsync(String accountIdentifier, String accountPassword, String accessToken, Boolean todaySessions, Boolean futureSessions, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1SessionsGetValidateBeforeCall(accountIdentifier, accountPassword, accessToken, todaySessions, futureSessions, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1TokenByTokenGet
     * @param token  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1TokenByTokenGetCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/token/{token}"
            .replaceAll("\\{" + "token" + "\\}", apiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1TokenByTokenGetValidateBeforeCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling v1TokenByTokenGet(Async)");
        }


        com.squareup.okhttp.Call call = v1TokenByTokenGetCall(token, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Method to check the validity of an Access Token
     * It is not mandatory to check if an existing API access token is still valid using this call.    If an access token is no longer valid, all API calls will return an HTTP 401 Unauthorized error to indicate that authentication has failed.                Success response (Status 200)    {    \&quot;requestBody\&quot;: \&quot;\&quot;,    \&quot;request\&quot;: {},    \&quot;dataDict\&quot;: {},    \&quot;accessToken\&quot;: null,    \&quot;data\&quot;: null,    \&quot;requestUri\&quot;: \&quot;/v1/token/string\&quot;,    \&quot;success\&quot;: true,    \&quot;message\&quot;: \&quot;\&quot;  }
     * @param token  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1TokenByTokenGet(String token) throws ApiException {
        v1TokenByTokenGetWithHttpInfo(token);
    }

    /**
     * Method to check the validity of an Access Token
     * It is not mandatory to check if an existing API access token is still valid using this call.    If an access token is no longer valid, all API calls will return an HTTP 401 Unauthorized error to indicate that authentication has failed.                Success response (Status 200)    {    \&quot;requestBody\&quot;: \&quot;\&quot;,    \&quot;request\&quot;: {},    \&quot;dataDict\&quot;: {},    \&quot;accessToken\&quot;: null,    \&quot;data\&quot;: null,    \&quot;requestUri\&quot;: \&quot;/v1/token/string\&quot;,    \&quot;success\&quot;: true,    \&quot;message\&quot;: \&quot;\&quot;  }
     * @param token  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1TokenByTokenGetWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = v1TokenByTokenGetValidateBeforeCall(token, null, null);
        return apiClient.execute(call);
    }

    /**
     * Method to check the validity of an Access Token (asynchronously)
     * It is not mandatory to check if an existing API access token is still valid using this call.    If an access token is no longer valid, all API calls will return an HTTP 401 Unauthorized error to indicate that authentication has failed.                Success response (Status 200)    {    \&quot;requestBody\&quot;: \&quot;\&quot;,    \&quot;request\&quot;: {},    \&quot;dataDict\&quot;: {},    \&quot;accessToken\&quot;: null,    \&quot;data\&quot;: null,    \&quot;requestUri\&quot;: \&quot;/v1/token/string\&quot;,    \&quot;success\&quot;: true,    \&quot;message\&quot;: \&quot;\&quot;  }
     * @param token  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1TokenByTokenGetAsync(String token, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1TokenByTokenGetValidateBeforeCall(token, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1TokenGet
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1TokenGetCall(String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1TokenGetValidateBeforeCall(String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = v1TokenGetCall(accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Method to request an Access Token
     * Generally, account identifier and account password are used to generate an API token authorizing the API consumer to act as the account without providing the credentials again and again.                The generated access token is valid for 24 hours.  If an access token is no longer valid, all API calls will return an HTTP 401 Unauthorized error to indicate that authentication has failed.
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @return TokenSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TokenSuccess v1TokenGet(String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        ApiResponse<TokenSuccess> resp = v1TokenGetWithHttpInfo(accountIdentifier, accountPassword, accessToken);
        return resp.getData();
    }

    /**
     * Method to request an Access Token
     * Generally, account identifier and account password are used to generate an API token authorizing the API consumer to act as the account without providing the credentials again and again.                The generated access token is valid for 24 hours.  If an access token is no longer valid, all API calls will return an HTTP 401 Unauthorized error to indicate that authentication has failed.
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @return ApiResponse&lt;TokenSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TokenSuccess> v1TokenGetWithHttpInfo(String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = v1TokenGetValidateBeforeCall(accountIdentifier, accountPassword, accessToken, null, null);
        Type localVarReturnType = new TypeToken<TokenSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Method to request an Access Token (asynchronously)
     * Generally, account identifier and account password are used to generate an API token authorizing the API consumer to act as the account without providing the credentials again and again.                The generated access token is valid for 24 hours.  If an access token is no longer valid, all API calls will return an HTTP 401 Unauthorized error to indicate that authentication has failed.
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1TokenGetAsync(String accountIdentifier, String accountPassword, String accessToken, final ApiCallback<TokenSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1TokenGetValidateBeforeCall(accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TokenSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1UserByUsernameDelete
     * @param username Username of the user to be deleted. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameDeleteCall(String username, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/{username}"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1UserByUsernameDeleteValidateBeforeCall(String username, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling v1UserByUsernameDelete(Async)");
        }


        com.squareup.okhttp.Call call = v1UserByUsernameDeleteCall(username, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to delete a user for authenticated account.
     *
     * @param username Username of the user to be deleted. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1UserByUsernameDelete(String username, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        v1UserByUsernameDeleteWithHttpInfo(username, accountIdentifier, accountPassword, accessToken);
    }

    /**
     * Used to delete a user for authenticated account.
     *
     * @param username Username of the user to be deleted. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1UserByUsernameDeleteWithHttpInfo(String username, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = v1UserByUsernameDeleteValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to delete a user for authenticated account. (asynchronously)
     *
     * @param username Username of the user to be deleted. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameDeleteAsync(String username, String accountIdentifier, String accountPassword, String accessToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1UserByUsernameDeleteValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1UserByUsernameEsignaturerenewsessionPost
     * @param username username of the user (required)
     * @param body RenewUserIS2Session data (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameEsignaturerenewsessionPostCall(String username, RenewUserIS2SessionRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/user/{username}/esignaturerenewsession"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1UserByUsernameEsignaturerenewsessionPostValidateBeforeCall(String username, RenewUserIS2SessionRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling v1UserByUsernameEsignaturerenewsessionPost(Async)");
        }


        com.squareup.okhttp.Call call = v1UserByUsernameEsignaturerenewsessionPostCall(username, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to renew a eSignature(IS2) session to enable its use with eSignature application.
     *
     * @param username username of the user (required)
     * @param body RenewUserIS2Session data (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1UserByUsernameEsignaturerenewsessionPost(String username, RenewUserIS2SessionRequestBody body) throws ApiException {
        v1UserByUsernameEsignaturerenewsessionPostWithHttpInfo(username, body);
    }

    /**
     * Used to renew a eSignature(IS2) session to enable its use with eSignature application.
     *
     * @param username username of the user (required)
     * @param body RenewUserIS2Session data (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1UserByUsernameEsignaturerenewsessionPostWithHttpInfo(String username, RenewUserIS2SessionRequestBody body) throws ApiException {
        com.squareup.okhttp.Call call = v1UserByUsernameEsignaturerenewsessionPostValidateBeforeCall(username, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to renew a eSignature(IS2) session to enable its use with eSignature application. (asynchronously)
     *
     * @param username username of the user (required)
     * @param body RenewUserIS2Session data (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameEsignaturerenewsessionPostAsync(String username, RenewUserIS2SessionRequestBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1UserByUsernameEsignaturerenewsessionPostValidateBeforeCall(username, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1UserByUsernameEsignaturesessionsGet
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param demoSystem indicates whether production or demonstration eSignature system should be queried (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameEsignaturesessionsGetCall(String username, String accountIdentifier, String accountPassword, String accessToken, Boolean demoSystem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/{username}/esignaturesessions"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));
        if (demoSystem != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("demoSystem", demoSystem));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1UserByUsernameEsignaturesessionsGetValidateBeforeCall(String username, String accountIdentifier, String accountPassword, String accessToken, Boolean demoSystem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling v1UserByUsernameEsignaturesessionsGet(Async)");
        }


        com.squareup.okhttp.Call call = v1UserByUsernameEsignaturesessionsGetCall(username, accountIdentifier, accountPassword, accessToken, demoSystem, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to retrieve eSignature sessions of the user created with eSignature or eSignatureDemo communication channels.
     *
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param demoSystem indicates whether production or demonstration eSignature system should be queried (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1UserByUsernameEsignaturesessionsGet(String username, String accountIdentifier, String accountPassword, String accessToken, Boolean demoSystem) throws ApiException {
        v1UserByUsernameEsignaturesessionsGetWithHttpInfo(username, accountIdentifier, accountPassword, accessToken, demoSystem);
    }

    /**
     * Used to retrieve eSignature sessions of the user created with eSignature or eSignatureDemo communication channels.
     *
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param demoSystem indicates whether production or demonstration eSignature system should be queried (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1UserByUsernameEsignaturesessionsGetWithHttpInfo(String username, String accountIdentifier, String accountPassword, String accessToken, Boolean demoSystem) throws ApiException {
        com.squareup.okhttp.Call call = v1UserByUsernameEsignaturesessionsGetValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, demoSystem, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to retrieve eSignature sessions of the user created with eSignature or eSignatureDemo communication channels. (asynchronously)
     *
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param demoSystem indicates whether production or demonstration eSignature system should be queried (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameEsignaturesessionsGetAsync(String username, String accountIdentifier, String accountPassword, String accessToken, Boolean demoSystem, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1UserByUsernameEsignaturesessionsGetValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, demoSystem, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1UserByUsernameGet
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameGetCall(String username, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/{username}"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1UserByUsernameGetValidateBeforeCall(String username, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling v1UserByUsernameGet(Async)");
        }


        com.squareup.okhttp.Call call = v1UserByUsernameGetCall(username, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to get user data.
     * Success response (Status 200)        {          \&quot;request\&quot;: {              \&quot;AccessToken\&quot;: \&quot;...\&quot;          },          \&quot;data\&quot;: {              \&quot;username\&quot;: \&quot;username\&quot;,              \&quot;firstName\&quot;: \&quot;\&quot;,              \&quot;lastName\&quot;: \&quot;\&quot;,              \&quot;apiOnly\&quot;: true,              \&quot;email\&quot;: \&quot;\&quot;,              \&quot;phone\&quot;: \&quot;\&quot;,              \&quot;automaticRecordingSessionStart\&quot;: false,              \&quot;communicationChannels\&quot;: {                  \&quot;applicationSharingActive\&quot;: true,                  \&quot;applicationSharingDefault\&quot;: false,                  \&quot;applicationSharingLicensed\&quot;: true,                  \&quot;videoActive\&quot;: true,                  \&quot;videoDefault\&quot;: false,                  \&quot;videoLicensed\&quot;: true,                  \&quot;audioActive\&quot;: false,                  \&quot;audioDefault\&quot;: false,                  \&quot;audioLicensed\&quot;: false              },              \&quot;enabled\&quot;: true,              \&quot;viewerPointerEnabled\&quot;: true,              \&quot;annotationToolEnabled\&quot;: true,              \&quot;screenSharingAdminsBlacklist\&quot;: \&quot;\&quot;,              \&quot;screenSharingAdminsWhitelist\&quot;: \&quot;\&quot;,              \&quot;screenSharingUsersBlacklist\&quot;: \&quot;\&quot;,              \&quot;screenSharingUsersWhitelist\&quot;: \&quot;\&quot;,              \&quot;invitationTextTemplate\&quot;: \&quot;\&quot;,              \&quot;joinSessionUrl\&quot;: \&quot;\&quot;,              \&quot;base64image\&quot;: \&quot;...\&quot;          },          \&quot;requestUri\&quot;: \&quot;/v1/user/username\&quot;,          \&quot;success\&quot;: true,          \&quot;message\&quot;: \&quot;The user was retrieved.\&quot;      }
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1UserByUsernameGet(String username, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        v1UserByUsernameGetWithHttpInfo(username, accountIdentifier, accountPassword, accessToken);
    }

    /**
     * Used to get user data.
     * Success response (Status 200)        {          \&quot;request\&quot;: {              \&quot;AccessToken\&quot;: \&quot;...\&quot;          },          \&quot;data\&quot;: {              \&quot;username\&quot;: \&quot;username\&quot;,              \&quot;firstName\&quot;: \&quot;\&quot;,              \&quot;lastName\&quot;: \&quot;\&quot;,              \&quot;apiOnly\&quot;: true,              \&quot;email\&quot;: \&quot;\&quot;,              \&quot;phone\&quot;: \&quot;\&quot;,              \&quot;automaticRecordingSessionStart\&quot;: false,              \&quot;communicationChannels\&quot;: {                  \&quot;applicationSharingActive\&quot;: true,                  \&quot;applicationSharingDefault\&quot;: false,                  \&quot;applicationSharingLicensed\&quot;: true,                  \&quot;videoActive\&quot;: true,                  \&quot;videoDefault\&quot;: false,                  \&quot;videoLicensed\&quot;: true,                  \&quot;audioActive\&quot;: false,                  \&quot;audioDefault\&quot;: false,                  \&quot;audioLicensed\&quot;: false              },              \&quot;enabled\&quot;: true,              \&quot;viewerPointerEnabled\&quot;: true,              \&quot;annotationToolEnabled\&quot;: true,              \&quot;screenSharingAdminsBlacklist\&quot;: \&quot;\&quot;,              \&quot;screenSharingAdminsWhitelist\&quot;: \&quot;\&quot;,              \&quot;screenSharingUsersBlacklist\&quot;: \&quot;\&quot;,              \&quot;screenSharingUsersWhitelist\&quot;: \&quot;\&quot;,              \&quot;invitationTextTemplate\&quot;: \&quot;\&quot;,              \&quot;joinSessionUrl\&quot;: \&quot;\&quot;,              \&quot;base64image\&quot;: \&quot;...\&quot;          },          \&quot;requestUri\&quot;: \&quot;/v1/user/username\&quot;,          \&quot;success\&quot;: true,          \&quot;message\&quot;: \&quot;The user was retrieved.\&quot;      }
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1UserByUsernameGetWithHttpInfo(String username, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = v1UserByUsernameGetValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to get user data. (asynchronously)
     * Success response (Status 200)        {          \&quot;request\&quot;: {              \&quot;AccessToken\&quot;: \&quot;...\&quot;          },          \&quot;data\&quot;: {              \&quot;username\&quot;: \&quot;username\&quot;,              \&quot;firstName\&quot;: \&quot;\&quot;,              \&quot;lastName\&quot;: \&quot;\&quot;,              \&quot;apiOnly\&quot;: true,              \&quot;email\&quot;: \&quot;\&quot;,              \&quot;phone\&quot;: \&quot;\&quot;,              \&quot;automaticRecordingSessionStart\&quot;: false,              \&quot;communicationChannels\&quot;: {                  \&quot;applicationSharingActive\&quot;: true,                  \&quot;applicationSharingDefault\&quot;: false,                  \&quot;applicationSharingLicensed\&quot;: true,                  \&quot;videoActive\&quot;: true,                  \&quot;videoDefault\&quot;: false,                  \&quot;videoLicensed\&quot;: true,                  \&quot;audioActive\&quot;: false,                  \&quot;audioDefault\&quot;: false,                  \&quot;audioLicensed\&quot;: false              },              \&quot;enabled\&quot;: true,              \&quot;viewerPointerEnabled\&quot;: true,              \&quot;annotationToolEnabled\&quot;: true,              \&quot;screenSharingAdminsBlacklist\&quot;: \&quot;\&quot;,              \&quot;screenSharingAdminsWhitelist\&quot;: \&quot;\&quot;,              \&quot;screenSharingUsersBlacklist\&quot;: \&quot;\&quot;,              \&quot;screenSharingUsersWhitelist\&quot;: \&quot;\&quot;,              \&quot;invitationTextTemplate\&quot;: \&quot;\&quot;,              \&quot;joinSessionUrl\&quot;: \&quot;\&quot;,              \&quot;base64image\&quot;: \&quot;...\&quot;          },          \&quot;requestUri\&quot;: \&quot;/v1/user/username\&quot;,          \&quot;success\&quot;: true,          \&quot;message\&quot;: \&quot;The user was retrieved.\&quot;      }
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameGetAsync(String username, String accountIdentifier, String accountPassword, String accessToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1UserByUsernameGetValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1UserByUsernameImageDelete
     * @param username Valid user name belonging to the account. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameImageDeleteCall(String username, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/{username}/image"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1UserByUsernameImageDeleteValidateBeforeCall(String username, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling v1UserByUsernameImageDelete(Async)");
        }


        com.squareup.okhttp.Call call = v1UserByUsernameImageDeleteCall(username, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to delete the profile image of a user belonging to an authenticated account.
     * Success response (Status 200)        {          \&quot;request\&quot;: {              \&quot;AccessToken\&quot;: \&quot;...\&quot;          },          \&quot;requestUri\&quot;: \&quot;/v1/user/username/image\&quot;,          \&quot;success\&quot;: true,          \&quot;message\&quot;: \&quot;User image deleted.\&quot;      }
     * @param username Valid user name belonging to the account. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1UserByUsernameImageDelete(String username, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        v1UserByUsernameImageDeleteWithHttpInfo(username, accountIdentifier, accountPassword, accessToken);
    }

    /**
     * Used to delete the profile image of a user belonging to an authenticated account.
     * Success response (Status 200)        {          \&quot;request\&quot;: {              \&quot;AccessToken\&quot;: \&quot;...\&quot;          },          \&quot;requestUri\&quot;: \&quot;/v1/user/username/image\&quot;,          \&quot;success\&quot;: true,          \&quot;message\&quot;: \&quot;User image deleted.\&quot;      }
     * @param username Valid user name belonging to the account. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1UserByUsernameImageDeleteWithHttpInfo(String username, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = v1UserByUsernameImageDeleteValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to delete the profile image of a user belonging to an authenticated account. (asynchronously)
     * Success response (Status 200)        {          \&quot;request\&quot;: {              \&quot;AccessToken\&quot;: \&quot;...\&quot;          },          \&quot;requestUri\&quot;: \&quot;/v1/user/username/image\&quot;,          \&quot;success\&quot;: true,          \&quot;message\&quot;: \&quot;User image deleted.\&quot;      }
     * @param username Valid user name belonging to the account. (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameImageDeleteAsync(String username, String accountIdentifier, String accountPassword, String accessToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1UserByUsernameImageDeleteValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1UserByUsernameImageUploadBase64Post
     * @param username username of the user (required)
     * @param body Authentication data and Image data encoded as base64 string. Please refer to UserImageRequestBody&#39;s model documentation. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameImageUploadBase64PostCall(String username, UserImageRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/user/{username}/image/upload-base64"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1UserByUsernameImageUploadBase64PostValidateBeforeCall(String username, UserImageRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling v1UserByUsernameImageUploadBase64Post(Async)");
        }


        com.squareup.okhttp.Call call = v1UserByUsernameImageUploadBase64PostCall(username, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to upload user&#39;s image as base64 encoded data string
     *
     * @param username username of the user (required)
     * @param body Authentication data and Image data encoded as base64 string. Please refer to UserImageRequestBody&#39;s model documentation. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1UserByUsernameImageUploadBase64Post(String username, UserImageRequestBody body) throws ApiException {
        v1UserByUsernameImageUploadBase64PostWithHttpInfo(username, body);
    }

    /**
     * Used to upload user&#39;s image as base64 encoded data string
     *
     * @param username username of the user (required)
     * @param body Authentication data and Image data encoded as base64 string. Please refer to UserImageRequestBody&#39;s model documentation. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1UserByUsernameImageUploadBase64PostWithHttpInfo(String username, UserImageRequestBody body) throws ApiException {
        com.squareup.okhttp.Call call = v1UserByUsernameImageUploadBase64PostValidateBeforeCall(username, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to upload user&#39;s image as base64 encoded data string (asynchronously)
     *
     * @param username username of the user (required)
     * @param body Authentication data and Image data encoded as base64 string. Please refer to UserImageRequestBody&#39;s model documentation. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameImageUploadBase64PostAsync(String username, UserImageRequestBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1UserByUsernameImageUploadBase64PostValidateBeforeCall(username, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1UserByUsernameImageUploadFilePost
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameImageUploadFilePostCall(String username, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/{username}/image/upload-file"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1UserByUsernameImageUploadFilePostValidateBeforeCall(String username, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling v1UserByUsernameImageUploadFilePost(Async)");
        }


        com.squareup.okhttp.Call call = v1UserByUsernameImageUploadFilePostCall(username, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to upload user&#39;s binary image file. Expects multipart/form-data content type
     *
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1UserByUsernameImageUploadFilePost(String username, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        v1UserByUsernameImageUploadFilePostWithHttpInfo(username, accountIdentifier, accountPassword, accessToken);
    }

    /**
     * Used to upload user&#39;s binary image file. Expects multipart/form-data content type
     *
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1UserByUsernameImageUploadFilePostWithHttpInfo(String username, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = v1UserByUsernameImageUploadFilePostValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to upload user&#39;s binary image file. Expects multipart/form-data content type (asynchronously)
     *
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameImageUploadFilePostAsync(String username, String accountIdentifier, String accountPassword, String accessToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1UserByUsernameImageUploadFilePostValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1UserByUsernamePersonalDataGet
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernamePersonalDataGetCall(String username, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/{username}/personal-data"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1UserByUsernamePersonalDataGetValidateBeforeCall(String username, String accountIdentifier, String accountPassword, String accessToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling v1UserByUsernamePersonalDataGet(Async)");
        }


        com.squareup.okhttp.Call call = v1UserByUsernamePersonalDataGetCall(username, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to retrieve personal data of the user.
     *
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1UserByUsernamePersonalDataGet(String username, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        v1UserByUsernamePersonalDataGetWithHttpInfo(username, accountIdentifier, accountPassword, accessToken);
    }

    /**
     * Used to retrieve personal data of the user.
     *
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1UserByUsernamePersonalDataGetWithHttpInfo(String username, String accountIdentifier, String accountPassword, String accessToken) throws ApiException {
        com.squareup.okhttp.Call call = v1UserByUsernamePersonalDataGetValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to retrieve personal data of the user. (asynchronously)
     *
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernamePersonalDataGetAsync(String username, String accountIdentifier, String accountPassword, String accessToken, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1UserByUsernamePersonalDataGetValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1UserByUsernamePut
     * @param username Username of the user that will get modified (required)
     * @param body Authentication and user information (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernamePutCall(String username, UserRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/user/{username}"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1UserByUsernamePutValidateBeforeCall(String username, UserRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling v1UserByUsernamePut(Async)");
        }


        com.squareup.okhttp.Call call = v1UserByUsernamePutCall(username, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to modify a user for authenticated account.
     * **Remarks regarding the password:**  * Passing a non-empty password for the Non-APIonly user will change the previously set password.  * Passing a non-empty password for the APIonly user will not change a password for the user.  * Passing an empty password will not change user&#39;s previously set password.    **Remarks regarding communication channels:**    It is possible not to pass any value for the active and default flags of a communication channel.  If active or default flag is not passed for the channel, then the flag for the communication channel will not be updated in the user&#39;s dataset.
     * @param username Username of the user that will get modified (required)
     * @param body Authentication and user information (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1UserByUsernamePut(String username, UserRequestBody body) throws ApiException {
        v1UserByUsernamePutWithHttpInfo(username, body);
    }

    /**
     * Used to modify a user for authenticated account.
     * **Remarks regarding the password:**  * Passing a non-empty password for the Non-APIonly user will change the previously set password.  * Passing a non-empty password for the APIonly user will not change a password for the user.  * Passing an empty password will not change user&#39;s previously set password.    **Remarks regarding communication channels:**    It is possible not to pass any value for the active and default flags of a communication channel.  If active or default flag is not passed for the channel, then the flag for the communication channel will not be updated in the user&#39;s dataset.
     * @param username Username of the user that will get modified (required)
     * @param body Authentication and user information (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1UserByUsernamePutWithHttpInfo(String username, UserRequestBody body) throws ApiException {
        com.squareup.okhttp.Call call = v1UserByUsernamePutValidateBeforeCall(username, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to modify a user for authenticated account. (asynchronously)
     * **Remarks regarding the password:**  * Passing a non-empty password for the Non-APIonly user will change the previously set password.  * Passing a non-empty password for the APIonly user will not change a password for the user.  * Passing an empty password will not change user&#39;s previously set password.    **Remarks regarding communication channels:**    It is possible not to pass any value for the active and default flags of a communication channel.  If active or default flag is not passed for the channel, then the flag for the communication channel will not be updated in the user&#39;s dataset.
     * @param username Username of the user that will get modified (required)
     * @param body Authentication and user information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernamePutAsync(String username, UserRequestBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1UserByUsernamePutValidateBeforeCall(username, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1UserByUsernameSessionsGet
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param todaySessions get sessions scheduled for today (optional)
     * @param futureSessions get sessions scheduled in the futere from now on. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameSessionsGetCall(String username, String accountIdentifier, String accountPassword, String accessToken, Boolean todaySessions, Boolean futureSessions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/{username}/sessions"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accountIdentifier != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountIdentifier", accountIdentifier));
        if (accountPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccountPassword", accountPassword));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AccessToken", accessToken));
        if (todaySessions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("todaySessions", todaySessions));
        if (futureSessions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("futureSessions", futureSessions));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1UserByUsernameSessionsGetValidateBeforeCall(String username, String accountIdentifier, String accountPassword, String accessToken, Boolean todaySessions, Boolean futureSessions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling v1UserByUsernameSessionsGet(Async)");
        }


        com.squareup.okhttp.Call call = v1UserByUsernameSessionsGetCall(username, accountIdentifier, accountPassword, accessToken, todaySessions, futureSessions, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to retrieve reserved sessions of the user.
     * Success response (Status 200)        {        \&quot;requestBody\&quot;: \&quot;\&quot;,        \&quot;request\&quot;: {          \&quot;AccessToken\&quot;: \&quot;...\&quot;,          \&quot;todaySessions\&quot;: \&quot;true\&quot;,          \&quot;futureSessions\&quot;: \&quot;true\&quot;        },        \&quot;dataDict\&quot;: {},        \&quot;accessToken\&quot;: null,        \&quot;data\&quot;: [          {            \&quot;nineDigitKey\&quot;: \&quot;123456789\&quot;,            \&quot;secureToken\&quot;: \&quot;..\&quot;,            \&quot;plannedStartUTC\&quot;: \&quot;2058.04.24 21:49:00\&quot;,            \&quot;topic\&quot;: \&quot;\&quot;,            \&quot;duration\&quot;: 0          }        ],        \&quot;requestUri\&quot;: \&quot;/v1/../username/sessions\&quot;,        \&quot;success\&quot;: true,        \&quot;message\&quot;: \&quot;User&#39;s sessions were retrieved.\&quot;      }
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param todaySessions get sessions scheduled for today (optional)
     * @param futureSessions get sessions scheduled in the futere from now on. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1UserByUsernameSessionsGet(String username, String accountIdentifier, String accountPassword, String accessToken, Boolean todaySessions, Boolean futureSessions) throws ApiException {
        v1UserByUsernameSessionsGetWithHttpInfo(username, accountIdentifier, accountPassword, accessToken, todaySessions, futureSessions);
    }

    /**
     * Used to retrieve reserved sessions of the user.
     * Success response (Status 200)        {        \&quot;requestBody\&quot;: \&quot;\&quot;,        \&quot;request\&quot;: {          \&quot;AccessToken\&quot;: \&quot;...\&quot;,          \&quot;todaySessions\&quot;: \&quot;true\&quot;,          \&quot;futureSessions\&quot;: \&quot;true\&quot;        },        \&quot;dataDict\&quot;: {},        \&quot;accessToken\&quot;: null,        \&quot;data\&quot;: [          {            \&quot;nineDigitKey\&quot;: \&quot;123456789\&quot;,            \&quot;secureToken\&quot;: \&quot;..\&quot;,            \&quot;plannedStartUTC\&quot;: \&quot;2058.04.24 21:49:00\&quot;,            \&quot;topic\&quot;: \&quot;\&quot;,            \&quot;duration\&quot;: 0          }        ],        \&quot;requestUri\&quot;: \&quot;/v1/../username/sessions\&quot;,        \&quot;success\&quot;: true,        \&quot;message\&quot;: \&quot;User&#39;s sessions were retrieved.\&quot;      }
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param todaySessions get sessions scheduled for today (optional)
     * @param futureSessions get sessions scheduled in the futere from now on. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1UserByUsernameSessionsGetWithHttpInfo(String username, String accountIdentifier, String accountPassword, String accessToken, Boolean todaySessions, Boolean futureSessions) throws ApiException {
        com.squareup.okhttp.Call call = v1UserByUsernameSessionsGetValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, todaySessions, futureSessions, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to retrieve reserved sessions of the user. (asynchronously)
     * Success response (Status 200)        {        \&quot;requestBody\&quot;: \&quot;\&quot;,        \&quot;request\&quot;: {          \&quot;AccessToken\&quot;: \&quot;...\&quot;,          \&quot;todaySessions\&quot;: \&quot;true\&quot;,          \&quot;futureSessions\&quot;: \&quot;true\&quot;        },        \&quot;dataDict\&quot;: {},        \&quot;accessToken\&quot;: null,        \&quot;data\&quot;: [          {            \&quot;nineDigitKey\&quot;: \&quot;123456789\&quot;,            \&quot;secureToken\&quot;: \&quot;..\&quot;,            \&quot;plannedStartUTC\&quot;: \&quot;2058.04.24 21:49:00\&quot;,            \&quot;topic\&quot;: \&quot;\&quot;,            \&quot;duration\&quot;: 0          }        ],        \&quot;requestUri\&quot;: \&quot;/v1/../username/sessions\&quot;,        \&quot;success\&quot;: true,        \&quot;message\&quot;: \&quot;User&#39;s sessions were retrieved.\&quot;      }
     * @param username username of the user (required)
     * @param accountIdentifier Can be used together with AccountPassword to authenticate an account (optional)
     * @param accountPassword Can be used together with AccountIdentifier to authenticate an account (optional)
     * @param accessToken Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used. (optional)
     * @param todaySessions get sessions scheduled for today (optional)
     * @param futureSessions get sessions scheduled in the futere from now on. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1UserByUsernameSessionsGetAsync(String username, String accountIdentifier, String accountPassword, String accessToken, Boolean todaySessions, Boolean futureSessions, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1UserByUsernameSessionsGetValidateBeforeCall(username, accountIdentifier, accountPassword, accessToken, todaySessions, futureSessions, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for v1UserPost
     * @param body Authentication and user information (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1UserPostCall(UserRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1UserPostValidateBeforeCall(UserRequestBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


        com.squareup.okhttp.Call call = v1UserPostCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Used to create a user for authenticated account.
     * Success response (Status 200)        {          \&quot;requestUri\&quot;: \&quot;/v1/user\&quot;,          \&quot;success\&quot;: true,          \&quot;message\&quot;: \&quot;User created.\&quot;      }        **Remarks regarding communication channels:**    It is possible not to pass any value for the active and default flags of a communication channel.  * if neither active nor default flag is passed for the channel, then the communication channel will be set for the new user to active and default, but only if the account is licensed to use this communication channel  * if only one of the communication channels flags is not passed but the other is, then the not passed flag will be processed as if a false value was passed
     * @param body Authentication and user information (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void v1UserPost(UserRequestBody body) throws ApiException {
        v1UserPostWithHttpInfo(body);
    }

    /**
     * Used to create a user for authenticated account.
     * Success response (Status 200)        {          \&quot;requestUri\&quot;: \&quot;/v1/user\&quot;,          \&quot;success\&quot;: true,          \&quot;message\&quot;: \&quot;User created.\&quot;      }        **Remarks regarding communication channels:**    It is possible not to pass any value for the active and default flags of a communication channel.  * if neither active nor default flag is passed for the channel, then the communication channel will be set for the new user to active and default, but only if the account is licensed to use this communication channel  * if only one of the communication channels flags is not passed but the other is, then the not passed flag will be processed as if a false value was passed
     * @param body Authentication and user information (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> v1UserPostWithHttpInfo(UserRequestBody body) throws ApiException {
        com.squareup.okhttp.Call call = v1UserPostValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Used to create a user for authenticated account. (asynchronously)
     * Success response (Status 200)        {          \&quot;requestUri\&quot;: \&quot;/v1/user\&quot;,          \&quot;success\&quot;: true,          \&quot;message\&quot;: \&quot;User created.\&quot;      }        **Remarks regarding communication channels:**    It is possible not to pass any value for the active and default flags of a communication channel.  * if neither active nor default flag is passed for the channel, then the communication channel will be set for the new user to active and default, but only if the account is licensed to use this communication channel  * if only one of the communication channels flags is not passed but the other is, then the not passed flag will be processed as if a false value was passed
     * @param body Authentication and user information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1UserPostAsync(UserRequestBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1UserPostValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
