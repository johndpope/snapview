/*
 * Snapview6 API
 * Official API available to Snapview customers
 *
 * OpenAPI spec version: v1
 * Contact: support@snapview.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.snapview.api.domain;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Class to verify authentication credentials or access token against the database
 */
@ApiModel(description = "Class to verify authentication credentials or access token against the database")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-21T09:48:31.039+02:00")
public class Authentication {
  @SerializedName("accountIdentifier")
  private String accountIdentifier = null;

  @SerializedName("accountPassword")
  private String accountPassword = null;

  @SerializedName("accessToken")
  private String accessToken = null;

  public Authentication accountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
    return this;
  }

   /**
   * Can be used together with AccountPassword to authenticate an account
   * @return accountIdentifier
  **/
  @ApiModelProperty(value = "Can be used together with AccountPassword to authenticate an account")
  public String getAccountIdentifier() {
    return accountIdentifier;
  }

  public void setAccountIdentifier(String accountIdentifier) {
    this.accountIdentifier = accountIdentifier;
  }

  public Authentication accountPassword(String accountPassword) {
    this.accountPassword = accountPassword;
    return this;
  }

   /**
   * Can be used together with AccountIdentifier to authenticate an account
   * @return accountPassword
  **/
  @ApiModelProperty(value = "Can be used together with AccountIdentifier to authenticate an account")
  public String getAccountPassword() {
    return accountPassword;
  }

  public void setAccountPassword(String accountPassword) {
    this.accountPassword = accountPassword;
  }

  public Authentication accessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

   /**
   * Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used.
   * @return accessToken
  **/
  @ApiModelProperty(value = "Account-specific access token  (primary way to authenticate an account for API calls)  If AccountIdentifier, AccountPassword and AccessToken are given, only AccessToken is used.")
  public String getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Authentication authentication = (Authentication) o;
    return Objects.equals(this.accountIdentifier, authentication.accountIdentifier) &&
        Objects.equals(this.accountPassword, authentication.accountPassword) &&
        Objects.equals(this.accessToken, authentication.accessToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountIdentifier, accountPassword, accessToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Authentication {\n");

    sb.append("    accountIdentifier: ").append(toIndentedString(accountIdentifier)).append("\n");
    sb.append("    accountPassword: ").append(toIndentedString(accountPassword)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

